	public final static int TAILLE;
	public final static Point CENTRE;
	public class Coord{
		public int xmin,ymin,xmax,ymax;
		public Coord(int xmin, int ymin, int xmax, int ymax);
		public Coord clone();
	}

	// Constructeur de terrain vide  
	Terrain();
	
	public Terrain clone();   // Renvoie une copie du terrain, avec référence différente
	
	public Case getCase(Point P);
	public Case getCase(int i, int j);
	
	public boolean isEmpty();  // Renvoie vrai ssi le Terrain est vide
	
	public Coord getLimites();
	// Renvoie les coordonnées limites du terrain : toutes les tuiles sont comprises dans
	// (xmin,ymin)--------|
	//      |             |
	//      |--------(xmax,ymax)
	
	public ArrayList<Action_Tuile> getHistoTuiles();      // Renvoie l'historique des tuiles placées
	public ArrayList<Action_Batiment> getHistoBatiments(); // Renvoie l'historique des batiments placés

	public Cite getCite(Point P); // Renvoie la cite contenant le point P
	public ArrayList<Cite> getCitesJoueur(Case.Couleur_Joueur c); // Renvoie l'ensemble des cites du joueur c
	
	//              ___/ 3,0 \
	//             /   \     /
	//         ___/ 2,0 \___/
	//        /   \     /   \
	//    ___/ 1,0 \___/ 3,1 \
	//   /	 \     /   \     /
	//  / 0,0 \___/ 2,1 \___/
	//  \     /   \     /   \
	//   \___/ 1,1 \___/ 3,2 \
	//   /   \     /   \     /
	//  / 0,1 \___/ 2,2 \___/
	//  \     /   \     /   \
	//   \___/ 1,2 \___/ 3,3 \
	
		// PLACEMENT TUILE
		
	//	Position pour le placement :
	//           _      _
	//         _/X\    /X\_
	// GAUCHE / \_/    \_/ \ DROITE
	//        \_/ \    / \_/
	//          \_/    \_/
	
	// Renvoie le Terrain après placement de tuile au point P. Ne modifie pas la structure actuelle.
	public Terrain consulter_coup_tuile(Tuile tuile, Point P)
	
	// Place la tuile donnée au point P. Renvoie 0 si la tuile a pu etre placée, 1 sinon.
	public int placer_tuile(Tuile tuile, Point P);
	
	// Renvoie le niveau THEORIQUE de placement de la tuile au point P
	public int getNiveauTheorique(Tuile.Orientation o, Point P);
	
	// Renvoie vrai ssi le placement de cette tuile est autorisé au point P.
	public boolean placement_tuile_autorise(Tuile tuile, Point P);
	
	// PLACEMENT BATIMENTS
	
	// Renvoie le niveau THEORIQUE de placement d'un batiment au Point P
	public int getNiveauTheoriqueBatiment(Point P);
	
	// PLACEMENT DIRECT (HORS EXTENSION)
	
	// Renvoie le Terrain après placement direct d'un batiment b de couleur c au point P.
	// Ne modifie pas la structure actuelle.
	public Terrain consulter_coup_batiment(Case.Type_Batiment b, Case.Couleur_Joueur c, Point P);
	
	// Place directement un batiment de type b au point P (hors extension de cite).
	// Renvoie 0 si le placement a réussi, 1 sinon.
	public int placer_batiment(Case.Type_Batiment b, Case.Couleur_Joueur c, Point P);
	
	// Renvoie vrai ssi le placement direct d'un batiment de type b au point P est autorisé.
	public boolean placement_batiment_autorise(Case.Type_Batiment b, Case.Couleur_Joueur c, Point P);
	
	// EXTENSION
	
	// Renvoie le nombre de huttes necessaires a l'extension de la cite.
	public int nb_huttes_extension(Point P, Case.Type type);
	
	// Renvoie le Terrain après extension d'une cité présente au point P sur les cases de Type type.
	// Ne modifie pas la structure actuelle.
	public Terrain consulter_extension_cite(Point P, Case.Type type);
	
	// Etend la cité présente au point P sur les cases de Type type.
	// Renvoie 0 si l'extension a réussi, 1 sinon
	public int etendre_cite(Point P, Case.Type type);
	
	// AFFICHAGE CONSOLE
	
	// Affiche le terrain dans la console
	public void afficher();
	
	// LISTE COUPS
	
	// Renvoie la liste des emplacements possibles pour la Tuile tuile
	public ArrayList<Action_Tuile> liste_coups_tuile_possibles(Tuile tuile);
	
	// Renvoie la liste des constructions possibles pour le joueur de couleur c (hors extension)
	public ArrayList<Action_Construction> liste_coups_construction_possibles(Case.Couleur_Joueur c);
	
	// Liste des extensions possibles
	public ArrayList<Action_Construction> liste_extensions_possibles(Case.Couleur_Joueur c);
