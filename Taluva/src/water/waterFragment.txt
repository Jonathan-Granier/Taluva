#version 130

in vec2 textureCoords;
in vec3 fromLightVector;
in vec3 toCameraVector;
in vec2 textureCoords2;

out vec4 out_Color;

uniform sampler2D diffuseMap;
uniform sampler2D dudvMap;
uniform sampler2D normalMap;
uniform vec3 lightColour;

uniform float moveFactor;

const float waveStrenght = 0.2;
const float shineDamper = 20.0;
const float reflectivity = 0.6;

void main(void) {

	vec2 modifyTexCoords = textureCoords;

	vec2 distortion1 = (texture(dudvMap, vec2(textureCoords.x ,textureCoords.y+moveFactor)).rg * 2.0 -1.0) * waveStrenght;
	distortion1 += (texture(dudvMap, vec2(-textureCoords.x + moveFactor,textureCoords.y + moveFactor)).rg * 2.0 -1.0) * waveStrenght;
	modifyTexCoords += distortion1;
	
	vec2 modifyTexCoords2 = textureCoords2;

	vec2 distortion2 = (texture(dudvMap, vec2(textureCoords2.x,textureCoords2.y)).rg * 2.0 -1.0) * waveStrenght/5.0;
	//modifyTexCoords2 += distortion2;
	
	vec3 viewVector = normalize(toCameraVector);
	
	vec4 normalMapColour = texture(normalMap, modifyTexCoords);
	vec3 normal = vec3(normalMapColour.r *2.0 -1.0, normalMapColour.b, normalMapColour.g *2.0 -1.0);
	normal = normalize(normal);
	
	vec3 reflectedLight = reflect(normalize(fromLightVector), normal);
	float specular = max(dot(reflectedLight, viewVector), 0.0);
	specular = pow(specular, shineDamper);
	vec3 specularHighlights;
	specularHighlights = (lightColour - vec3(0.5,0.5,0.5)) * specular * reflectivity;

	
	float specular2 = dot(reflectedLight, viewVector);
	vec3 specularHighlights2;
	bool specularNeg;
	if(specular2 < 0){
		specular2 = pow(specular2, shineDamper);
		specularNeg = true;
		specularHighlights2 = vec3(0.0,0.1,0.2) * specular2 * reflectivity;
	}else
		specularNeg = false;
	
	float fresnelFactor = dot(viewVector,vec3(0.0,1.0,0.0));
	
	out_Color = texture(diffuseMap,modifyTexCoords2);
	if(specularNeg)
		out_Color = mix(out_Color,vec4(0.0,0.3,0.6,1.0),fresnelFactor) + vec4(specularHighlights2,0.0);
	else
		out_Color = mix(out_Color,vec4(0.0,0.3,0.6,1.0),fresnelFactor) + vec4(specularHighlights,0.0);

}