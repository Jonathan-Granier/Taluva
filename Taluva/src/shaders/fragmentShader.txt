#version 130
#define N_LIGHTS 4

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[N_LIGHTS];
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D diffuseMap;

uniform vec3 lightColour[N_LIGHTS];
uniform float shineDamper;
uniform vec3 reflectivity;
uniform vec3 diffuseColour;
uniform bool textured;
uniform bool notAllow;
uniform vec3 playerColour;


void main(void){


	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for(int i=0;i<N_LIGHTS;i++){
		vec3 unitLightVector = normalize(toLightVector[i]);
		
		float nDotl = dot(unitNormal,unitLightVector);
		float brightness = max(nDotl,0.0);
		
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
		
		float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
		specularFactor = max(specularFactor,0.0);
		float dampedFactor = pow(specularFactor,shineDamper);
		
		totalSpecular += dampedFactor * reflectivity * lightColour[i];
		totalDiffuse += brightness * lightColour[i];
	}

	// Brighter	
	totalDiffuse = max(totalDiffuse, 0.2);
	

	
	//Check of texture is enable
	if(textured){
		vec4 textureColour = texture(diffuseMap,pass_textureCoords);
		if(textureColour.a<0.5) // enable transparency
			discard;
		out_Color = vec4(totalDiffuse,1.0) * textureColour + vec4(totalSpecular,1.0);
	}
	else{
		totalDiffuse *= diffuseColour;
		out_Color = vec4(totalDiffuse,1.0) + vec4(totalSpecular,1.0);
	}

	if(notAllow)
		out_Color.r += 0.5;
	/*if((playerColour.r!=0.0 || playerColour.g!=0.0 || playerColour.b!=0.0) && !notAllow)
		out_Color += mix(out_Color,vec4(playerColour,1.0),0.8);*/

}